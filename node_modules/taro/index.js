const each = require('foreach');
const shuffle = require('shuffle-array');

//array with each card
const taroBase = {
    'pique': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'trefle': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'coeur': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'carreau': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'atout': {
        1: 'un',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'onze',
        12: 'douze',
        13: 'treize',
        14: 'quatorze',
        15: 'quinze',
        16: 'seize',
        17: 'dix-sept',
        18: 'dix-huit',
        19: 'dix-neuf',
        20: 'vingt',
        21: 'vingt-et-un',
        22: 'excuse'
    }
};

const deckList = [];
const handList = [];
const defList = [];

//creates a new sorted deck and add it to the deckList
exports.newDeck = function(name) {

    if (!deckList[name]) {

        deckList[name] = [];
        handList[name] = [];
        defList[name] = [];


        each(taroBase, function(value, key) {
            each(value, function(val, k) {
                // console.log(val + ' de ' + key);
                deckList[name].push([val, key]);
            });
        });

        return true;

    } else {
        return false;
    }

}

//shuffle the deck
exports.deckShuffle = function(name) {

    if (deckList[name]) {

        shuffle(deckList[name]);
        return true;

    } else {
        return false;
    }
}

//suffle def
exports.defShuffle = function(name) {
    if (defList[name]) {
        shuffle(defList[name]);
        return true;
    } else {
        return false;
    }
}

//card drawer
exports.drawCard = function(name, number = 1) {

    if (deckList[name]) {
        var drawnedCard = {};
        drawnedCard.cards = [];

        //add the top cards to the drawned ones and removes them from the deck
        for (var i = 0; i < number; i++) {
            drawnedCard.cards[i] = deckList[name][0];
            handList[name].push(deckList[name][0]);

            deckList[name].shift(); //removes first card
        }
        drawnedCard.remaining = deckList[name].length;

        return (drawnedCard);

    } else {
        return false;
    }
}

//draw from discards
exports.drawDef = function(name, number = 1) {
    if (deckList[name]) {
        var drawnedCard = {};
        drawnedCard.cards = [];

        for (var i = 0; i < number; i++) {
            drawnedCard.cards[i] = defList[name][0];
            handList[name].push(defList[name][0]);

            defList[name].shift();
        }

        drawnedCard.remaining = defList[name].length;

        return drawnedCard;


    } else {
        return false;
    }
}

//discard from hand
exports.defHand = function(name, number) {
    if (deckList[name]) {
        if (handList[name][number]) {
            defList[name].unshift(handList[name][number]);
            // defList[name].splice(defList[name].length, 1, handList[name][number]);
            handList[name].splice(number, 1);
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

exports.defDeck = function(name, number = 1) {
    if (defList[name]) {
        for (var i = 0; i < number; i++) {
            defList[name].push(deckList[name][0]);
            deckList[name].shift();
        }
        return true;
    } else {
        return false;
    }
}

//defausse vers pioche
exports.restore = function(name, number) {
    if (deckList[name]) {
        for (var i = 0; i < number; i++) {
            deckList[name].push(defList[name][0]);
            defList[name].shift();
        }
        return true;
    } else {
        return false;
    }
}

//deck reset
exports.clearDeck = function(name) {

    if (deckList[name]) {

        deckList[name] = [];

        each(taroBase, function(value, key) {
            each(value, function(val, k) {
                deckList[name].push([val, key]);
            });
        });
        handList[name] = [];
        handList[name] = [];

        return true;
    } else {
        return false;
    }
}


//check hand
exports.showHand = function(name) {

    if (handList[name]) {
        return handList[name];
    } else {
        return false;
    }

}

//check deck
exports.checkDeck = function (name, number = 1) {
    if (deckList[name]) {
        var toRet = [];
        toRet['number'] = deckList[name].length;
        toRet['cards'] = [];
        for (var i = 0; i < number; i++) {
            toRet['cards'][i] = deckList[name][i]
        }
        return toRet;
    } else {
        return false;
    }
}

//check def
exports.checkDef = function (name, number = 1) {
    if (defList[name]) {
        var toRet = [];
        toRet['number'] = defList[name].length;
        toRet['cards'] = [];
        for (var i = 0; i < number; i++) {
            toRet['cards'][i] = defList[name][i]
        }
        return toRet;
    } else {
        return false;
    }
}
