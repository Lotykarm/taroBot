const each = require('foreach');
const shuffle = require('shuffle-array');

//array with each card
const taroBase = {
    'pique': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'trefle': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'coeur': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'carreau': {
        1: 'as',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'valet',
        12: 'cavalier',
        13: 'dame',
        14: 'roi'
    },
    'atout': {
        1: 'un',
        2: 'deux',
        3: 'trois',
        4: 'quatre',
        5: 'cinq',
        6: 'six',
        7: 'sept',
        8: 'huit',
        9: 'neuf',
        10: 'dix',
        11: 'onze',
        12: 'douze',
        13: 'treize',
        14: 'quatorze',
        15: 'quinze',
        16: 'seize',
        17: 'dix-sept',
        18: 'dix-huit',
        19: 'dix-neuf',
        20: 'vingt',
        21: 'vingt-et-un',
        22: 'excuse'
    }
};

//full set of card
// const taroFull = [];
//
// each(taroBase, function(value, key) {
//     each(value, function(val, k) {
//         // console.log(val + ' de ' + key);
//         taroFull.push([val, key]);
//     });
// });

const deckList = [];


//creates a new sorted deck and add it to the deckList
exports.newDeck = function(name) {

    if (!deckList[name]) {

        deckList[name] = [];

        each(taroBase, function(value, key) {
            each(value, function(val, k) {
                // console.log(val + ' de ' + key);
                deckList[name].push([val, key]);
            });
        });

        return true;

    } else {
        return false;
    }

}

//shuffle the deck
exports.deckShuffle = function(name) {

    if (deckList[name]) {

        shuffle(deckList[name]);
        return true;

    } else {
        return false;
    }
}

//card drawer
exports.drawCard = function(name, number = 1) {

    if (deckList[name]) {
        var drawnedCard = {};
        drawnedCard.cards = [];

        //add the top cards to the drawned ones and removes them from the deck
        for (var i = 0; i < number; i++) {
            drawnedCard.cards[i] = deckList[name][0];

            deckList[name].shift();//removes first card
        }
        drawnedCard.remaining = deckList[name].length;
        return(drawnedCard);

    } else {
        return false;
    }
}

//deck reset
exports.clearDeck = function(name) {

    if (deckList[name]) {

        deckList[name] = [];

        each(taroBase, function(value, key) {
            each(value, function(val, k) {
                deckList[name].push([val, key]);
            });
        });


        return true;
    } else {
        return false;
    }
}

exports.addcart = function(name, card, number = 1) {

    if (deckList[name]) {
        each(number, function(val) {
            
        });
    }
}
